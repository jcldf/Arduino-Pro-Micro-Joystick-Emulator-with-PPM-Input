#include <Joystick.h>

Joystick_ Joystick(JOYSTICK_DEFAULT_REPORT_ID,
  JOYSTICK_TYPE_GAMEPAD,
  14, // Número de botões
  0,  // Número de HAT switches
  true,  // Include X axis
  true,  // Include Y axis
  true,  // Include Z axis
  true,  // Include Rx axis
  false, // Include Ry axis
  false, // Include Rz axis
  false, // Include rudder
  false, // Include throttle
  false, // Include accelerator
  false, // Include brake
  false  // Include steering
);

// Defina se você quer usar PPM
const boolean usePPM = true;

// Número de canais RC
#define RC_CHANS 5
volatile uint16_t rcValue[RC_CHANS] = {1502, 1502, 1502, 1502, 1502};
uint16_t lastSentValue[RC_CHANS] = {1502, 1502, 1502, 1502, 1502};

// Defina o limite para quantização (ajuste conforme necessário)
const int QUANTIZATION_LIMIT = 10;

// Variável para indicar quando novos dados PPM são recebidos
volatile boolean newDataReceived = false;

// Enumeração dos canais
enum {
  PITCH,
  YAW,
  THROTTLE,
  ROLL,
  AUX1
};

const int ppmInputPin = 3; // INT0 no Pro Micro

void setup() {
  Serial.begin(115200);
  setupPins();
  Joystick.begin();
}

void loop() {
  if (usePPM) {
    // Apenas atualiza se houve mudanças significativas
    if (newDataReceived) {
      newDataReceived = false;

      // Envia o estado atualizado do joystick para o computador
      updateJoystick();
      
      Serial.print("PPM Recebido - Valores dos canais: ");
      Serial.print("PITCH: "); Serial.print(rcValue[PITCH]);
      Serial.print(", YAW: "); Serial.print(rcValue[YAW]);
      Serial.print(", THROTTLE: "); Serial.print(rcValue[THROTTLE]);
      Serial.print(", ROLL: "); Serial.print(rcValue[ROLL]);
      Serial.print(", AUX1: "); Serial.println(rcValue[AUX1]);
    }
  }
}

void setupPins(void) {
  if (usePPM) {
    pinMode(ppmInputPin, INPUT);
    attachInterrupt(digitalPinToInterrupt(ppmInputPin), rxInt, RISING);
  }
}

void updateJoystick() {
  // Somente envia mudanças se ultrapassarem o limite de quantização
  if (abs(rcValue[YAW] - lastSentValue[YAW]) > QUANTIZATION_LIMIT) {
    Joystick.setXAxis(mapToJoystickRange(rcValue[YAW]));
    lastSentValue[YAW] = rcValue[YAW];
  }

  if (abs(rcValue[THROTTLE] - lastSentValue[THROTTLE]) > QUANTIZATION_LIMIT) {
    Joystick.setYAxis(mapToJoystickRange(rcValue[THROTTLE]));
    lastSentValue[THROTTLE] = rcValue[THROTTLE];
  }

  if (abs(rcValue[ROLL] - lastSentValue[ROLL]) > QUANTIZATION_LIMIT) {
    Joystick.setZAxis(mapToJoystickRange(rcValue[ROLL]));
    lastSentValue[ROLL] = rcValue[ROLL];
  }

  if (abs(rcValue[PITCH] - lastSentValue[PITCH]) > QUANTIZATION_LIMIT) {
    Joystick.setRxAxis(mapToJoystickRange(rcValue[PITCH]));
    lastSentValue[PITCH] = rcValue[PITCH];
  }

  Joystick.sendState();
}

// Função para mapear os valores PPM para o intervalo do joystick (0 a 255)
byte mapToJoystickRange(int rcVal) {
  return map(constrain(rcVal, 1000, 2000), 1000, 2000, 0, 255);
}

// Rotina de interrupção para leitura do sinal PPM
void rxInt(void) {
  uint16_t now, diff;
  static uint16_t last = 0;
  static uint8_t chan = 0;

  now = micros();
  diff = now - last;
  last = now;

  if (diff > 3000) {
    chan = 0;
  } else {
    if (900 < diff && diff < 2200 && chan < RC_CHANS) {
      rcValue[chan] = adjust(diff, chan); // Ajuste fino, se necessário
      newDataReceived = true;
    }
    chan++;
  }
}

// Ajustes finos (opcional)
uint16_t adjust(uint16_t diff, uint8_t chan) {
  switch (chan) {
    case THROTTLE: return diff + 50;
    case YAW:      return diff + 60;
    case PITCH:    return diff + 60;
    case ROLL:     return diff + 60;
    case AUX1:     return diff + 10;
  }
  return diff;
}
